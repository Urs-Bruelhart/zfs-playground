#!/bin/bash
#
# This script is used drop (re)build a lab Zpool, destroying the
# current one if it already exists.
#


# Errors are fatal
set -e

if test "$1" == "-h" -o "$1" == "--help"
then
	echo "# "
	echo "# Syntax: $0 [ mirror | raidz | raidz2 | raidz3 ]"
	echo "# "
	echo "# If you want disk mirroring or RAID, please specify that."
	echo "# By default, you'll get what amounts to RAID-0, where a single disk failure will tank the entire Zpool."
	echo "# "
	echo "# "
	exit 1
fi

NAME="zfs"
TYPE="none"
if test "$1"
then
	TYPE=$1
fi


#
# Remove our ZFS pool if it already exists, and create it again.
#
/vagrant/bin/zfs-destroy-pool-if-exists ${NAME}
rm -rfv /${NAME}

if test "${TYPE}" == "none"
then
	/vagrant/bin/zfs-create-pool ${NAME} /disks/disk0 /disks/disk1 /disks/disk2

elif test "${TYPE}" == "mirror"
then
	/vagrant/bin/zfs-create-pool ${NAME} mirror /disks/disk0 /disks/disk1

elif test "${TYPE}" == "raidz"
then
	/vagrant/bin/zfs-create-pool ${NAME} raidz /disks/disk0 /disks/disk1 /disks/disk2

elif test "${TYPE}" == "raidz2"
then
	/vagrant/bin/zfs-create-pool ${NAME} raidz2 /disks/disk0 /disks/disk1 /disks/disk2 /disks/disk3

elif test "${TYPE}" == "raidz3"
then
	/vagrant/bin/zfs-create-pool ${NAME} raidz3 /disks/disk0 /disks/disk1 /disks/disk2 /disks/disk3 /disks/disk4

fi


# Set our Zpool to unmountable.  This is because the main Zpool is treated as 
# a dataset itself and that really confused me when I created started creating
# ZFS filesystems.
zfs set canmount=off ${NAME}

# Create a simple lab filesystem.
ZFS=${NAME}/lab1
zfs create ${ZFS}

#
# Fill up our filesystem
#
/vagrant/bin/populate-zfs-filesystem ${ZFS} 5 5

echo "# "
echo "# Created zpool named ${NAME} with mirroring type ${TYPE}."
echo "# A mounted ZFS filesystem is in ${ZFS}"
echo "# "


